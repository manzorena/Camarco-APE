//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Camarco.Web.WS.Camarco.NL {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="api_2_1Soap", Namespace="http://api.gbcorreo.net/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Group))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Contact))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContactStatus))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SimpleCampaign))]
    public partial class api_2_1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetLastErrorOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGroupDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateContactByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddOrUpdateContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddOrUpdateContactByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnsubscribeContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteContactByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContactDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContactDetailByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContactActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContactActivityByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContactGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContactGroupsByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllContactsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContactStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContactStatusByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateContactByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeactivateContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeactivateContactByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddOrUpdateContactFieldOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllSimpleCampaignsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSimpleCampaignOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSimpleCampaignOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSimpleCampaignOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSimpleCampaignOperationCompleted;
        
        private System.Threading.SendOrPostCallback ScheduleSimpleCampaignOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSimpleCampaignDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportRecipientsSimpleCampaignOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportUniqueOpensSimpleCampaignsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportUniqueClicksSimpleCampaignsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public api_2_1() {
            this.Url = global::Camarco.Web.Properties.Settings.Default.Camarco_Web_WS_Camarco_NL_api_2_1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetLastErrorCompletedEventHandler GetLastErrorCompleted;
        
        /// <remarks/>
        public event CreateGroupCompletedEventHandler CreateGroupCompleted;
        
        /// <remarks/>
        public event DeleteGroupCompletedEventHandler DeleteGroupCompleted;
        
        /// <remarks/>
        public event UpdateGroupCompletedEventHandler UpdateGroupCompleted;
        
        /// <remarks/>
        public event GetGroupDetailCompletedEventHandler GetGroupDetailCompleted;
        
        /// <remarks/>
        public event GetAllGroupsCompletedEventHandler GetAllGroupsCompleted;
        
        /// <remarks/>
        public event AddContactCompletedEventHandler AddContactCompleted;
        
        /// <remarks/>
        public event UpdateContactCompletedEventHandler UpdateContactCompleted;
        
        /// <remarks/>
        public event UpdateContactByIdCompletedEventHandler UpdateContactByIdCompleted;
        
        /// <remarks/>
        public event AddOrUpdateContactCompletedEventHandler AddOrUpdateContactCompleted;
        
        /// <remarks/>
        public event AddOrUpdateContactByIdCompletedEventHandler AddOrUpdateContactByIdCompleted;
        
        /// <remarks/>
        public event UnsubscribeContactCompletedEventHandler UnsubscribeContactCompleted;
        
        /// <remarks/>
        public event DeleteContactCompletedEventHandler DeleteContactCompleted;
        
        /// <remarks/>
        public event DeleteContactByIdCompletedEventHandler DeleteContactByIdCompleted;
        
        /// <remarks/>
        public event GetContactDetailCompletedEventHandler GetContactDetailCompleted;
        
        /// <remarks/>
        public event GetContactDetailByIdCompletedEventHandler GetContactDetailByIdCompleted;
        
        /// <remarks/>
        public event GetContactActivityCompletedEventHandler GetContactActivityCompleted;
        
        /// <remarks/>
        public event GetContactActivityByIdCompletedEventHandler GetContactActivityByIdCompleted;
        
        /// <remarks/>
        public event GetContactGroupsCompletedEventHandler GetContactGroupsCompleted;
        
        /// <remarks/>
        public event GetContactGroupsByIdCompletedEventHandler GetContactGroupsByIdCompleted;
        
        /// <remarks/>
        public event GetAllContactsCompletedEventHandler GetAllContactsCompleted;
        
        /// <remarks/>
        public event GetContactStatusCompletedEventHandler GetContactStatusCompleted;
        
        /// <remarks/>
        public event GetContactStatusByIdCompletedEventHandler GetContactStatusByIdCompleted;
        
        /// <remarks/>
        public event ActivateContactCompletedEventHandler ActivateContactCompleted;
        
        /// <remarks/>
        public event ActivateContactByIdCompletedEventHandler ActivateContactByIdCompleted;
        
        /// <remarks/>
        public event DeactivateContactCompletedEventHandler DeactivateContactCompleted;
        
        /// <remarks/>
        public event DeactivateContactByIdCompletedEventHandler DeactivateContactByIdCompleted;
        
        /// <remarks/>
        public event AddOrUpdateContactFieldCompletedEventHandler AddOrUpdateContactFieldCompleted;
        
        /// <remarks/>
        public event GetAllSimpleCampaignsCompletedEventHandler GetAllSimpleCampaignsCompleted;
        
        /// <remarks/>
        public event CreateSimpleCampaignCompletedEventHandler CreateSimpleCampaignCompleted;
        
        /// <remarks/>
        public event UpdateSimpleCampaignCompletedEventHandler UpdateSimpleCampaignCompleted;
        
        /// <remarks/>
        public event DeleteSimpleCampaignCompletedEventHandler DeleteSimpleCampaignCompleted;
        
        /// <remarks/>
        public event SendSimpleCampaignCompletedEventHandler SendSimpleCampaignCompleted;
        
        /// <remarks/>
        public event ScheduleSimpleCampaignCompletedEventHandler ScheduleSimpleCampaignCompleted;
        
        /// <remarks/>
        public event GetSimpleCampaignDetailCompletedEventHandler GetSimpleCampaignDetailCompleted;
        
        /// <remarks/>
        public event ReportRecipientsSimpleCampaignCompletedEventHandler ReportRecipientsSimpleCampaignCompleted;
        
        /// <remarks/>
        public event ReportUniqueOpensSimpleCampaignsCompletedEventHandler ReportUniqueOpensSimpleCampaignsCompleted;
        
        /// <remarks/>
        public event ReportUniqueClicksSimpleCampaignsCompletedEventHandler ReportUniqueClicksSimpleCampaignsCompleted;
        
        /// <remarks/>
        public event TestCompletedEventHandler TestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/GetLastError", RequestNamespace="http://api.gbcorreo.net/", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ErrorResult GetLastError() {
            object[] results = this.Invoke("GetLastError", new object[0]);
            return ((ErrorResult)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastErrorAsync() {
            this.GetLastErrorAsync(null);
        }
        
        /// <remarks/>
        public void GetLastErrorAsync(object userState) {
            if ((this.GetLastErrorOperationCompleted == null)) {
                this.GetLastErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastErrorOperationCompleted);
            }
            this.InvokeAsync("GetLastError", new object[0], this.GetLastErrorOperationCompleted, userState);
        }
        
        private void OnGetLastErrorOperationCompleted(object arg) {
            if ((this.GetLastErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastErrorCompleted(this, new GetLastErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Group.Create", RequestElementName="Group.Create", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Group.CreateResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Group.CreateResult")]
        public object CreateGroup(string ApiKey, string AccountID, string GroupName, string ParentGroupID, string GroupDescription, bool IsPublic, string PublicName) {
            object[] results = this.Invoke("CreateGroup", new object[] {
                        ApiKey,
                        AccountID,
                        GroupName,
                        ParentGroupID,
                        GroupDescription,
                        IsPublic,
                        PublicName});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void CreateGroupAsync(string ApiKey, string AccountID, string GroupName, string ParentGroupID, string GroupDescription, bool IsPublic, string PublicName) {
            this.CreateGroupAsync(ApiKey, AccountID, GroupName, ParentGroupID, GroupDescription, IsPublic, PublicName, null);
        }
        
        /// <remarks/>
        public void CreateGroupAsync(string ApiKey, string AccountID, string GroupName, string ParentGroupID, string GroupDescription, bool IsPublic, string PublicName, object userState) {
            if ((this.CreateGroupOperationCompleted == null)) {
                this.CreateGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateGroupOperationCompleted);
            }
            this.InvokeAsync("CreateGroup", new object[] {
                        ApiKey,
                        AccountID,
                        GroupName,
                        ParentGroupID,
                        GroupDescription,
                        IsPublic,
                        PublicName}, this.CreateGroupOperationCompleted, userState);
        }
        
        private void OnCreateGroupOperationCompleted(object arg) {
            if ((this.CreateGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateGroupCompleted(this, new CreateGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Group.Delete", RequestElementName="Group.Delete", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Group.DeleteResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Group.DeleteResult")]
        public object DeleteGroup(string ApiKey, string AccountID, string GroupID) {
            object[] results = this.Invoke("DeleteGroup", new object[] {
                        ApiKey,
                        AccountID,
                        GroupID});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteGroupAsync(string ApiKey, string AccountID, string GroupID) {
            this.DeleteGroupAsync(ApiKey, AccountID, GroupID, null);
        }
        
        /// <remarks/>
        public void DeleteGroupAsync(string ApiKey, string AccountID, string GroupID, object userState) {
            if ((this.DeleteGroupOperationCompleted == null)) {
                this.DeleteGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteGroupOperationCompleted);
            }
            this.InvokeAsync("DeleteGroup", new object[] {
                        ApiKey,
                        AccountID,
                        GroupID}, this.DeleteGroupOperationCompleted, userState);
        }
        
        private void OnDeleteGroupOperationCompleted(object arg) {
            if ((this.DeleteGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteGroupCompleted(this, new DeleteGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Group.Update", RequestElementName="Group.Update", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Group.UpdateResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Group.UpdateResult")]
        public object UpdateGroup(string ApiKey, string AccountID, string GroupID, string GroupName, string ParentGroupID, string GroupDescription, bool IsPublic, string PublicName) {
            object[] results = this.Invoke("UpdateGroup", new object[] {
                        ApiKey,
                        AccountID,
                        GroupID,
                        GroupName,
                        ParentGroupID,
                        GroupDescription,
                        IsPublic,
                        PublicName});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateGroupAsync(string ApiKey, string AccountID, string GroupID, string GroupName, string ParentGroupID, string GroupDescription, bool IsPublic, string PublicName) {
            this.UpdateGroupAsync(ApiKey, AccountID, GroupID, GroupName, ParentGroupID, GroupDescription, IsPublic, PublicName, null);
        }
        
        /// <remarks/>
        public void UpdateGroupAsync(string ApiKey, string AccountID, string GroupID, string GroupName, string ParentGroupID, string GroupDescription, bool IsPublic, string PublicName, object userState) {
            if ((this.UpdateGroupOperationCompleted == null)) {
                this.UpdateGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateGroupOperationCompleted);
            }
            this.InvokeAsync("UpdateGroup", new object[] {
                        ApiKey,
                        AccountID,
                        GroupID,
                        GroupName,
                        ParentGroupID,
                        GroupDescription,
                        IsPublic,
                        PublicName}, this.UpdateGroupOperationCompleted, userState);
        }
        
        private void OnUpdateGroupOperationCompleted(object arg) {
            if ((this.UpdateGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateGroupCompleted(this, new UpdateGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Group.GetDetail", RequestElementName="Group.GetDetail", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Group.GetDetailResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Group.GetDetailResult")]
        public object GetGroupDetail(string ApiKey, string AccountID, string GroupID) {
            object[] results = this.Invoke("GetGroupDetail", new object[] {
                        ApiKey,
                        AccountID,
                        GroupID});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void GetGroupDetailAsync(string ApiKey, string AccountID, string GroupID) {
            this.GetGroupDetailAsync(ApiKey, AccountID, GroupID, null);
        }
        
        /// <remarks/>
        public void GetGroupDetailAsync(string ApiKey, string AccountID, string GroupID, object userState) {
            if ((this.GetGroupDetailOperationCompleted == null)) {
                this.GetGroupDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupDetailOperationCompleted);
            }
            this.InvokeAsync("GetGroupDetail", new object[] {
                        ApiKey,
                        AccountID,
                        GroupID}, this.GetGroupDetailOperationCompleted, userState);
        }
        
        private void OnGetGroupDetailOperationCompleted(object arg) {
            if ((this.GetGroupDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGroupDetailCompleted(this, new GetGroupDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Group.GetAll", RequestElementName="Group.GetAll", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Group.GetAllResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Group.GetAllResult")]
        public System.Data.DataSet GetAllGroups(string ApiKey, string AccountID, int PageNumber, int PageSize) {
            object[] results = this.Invoke("GetAllGroups", new object[] {
                        ApiKey,
                        AccountID,
                        PageNumber,
                        PageSize});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllGroupsAsync(string ApiKey, string AccountID, int PageNumber, int PageSize) {
            this.GetAllGroupsAsync(ApiKey, AccountID, PageNumber, PageSize, null);
        }
        
        /// <remarks/>
        public void GetAllGroupsAsync(string ApiKey, string AccountID, int PageNumber, int PageSize, object userState) {
            if ((this.GetAllGroupsOperationCompleted == null)) {
                this.GetAllGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllGroupsOperationCompleted);
            }
            this.InvokeAsync("GetAllGroups", new object[] {
                        ApiKey,
                        AccountID,
                        PageNumber,
                        PageSize}, this.GetAllGroupsOperationCompleted, userState);
        }
        
        private void OnGetAllGroupsOperationCompleted(object arg) {
            if ((this.GetAllGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllGroupsCompleted(this, new GetAllGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.Add", RequestElementName="Contact.Add", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.AddResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.AddResult")]
        public object AddContact(string ApiKey, string AccountID, string Email, string[] Groups, string[] Fields) {
            object[] results = this.Invoke("AddContact", new object[] {
                        ApiKey,
                        AccountID,
                        Email,
                        Groups,
                        Fields});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void AddContactAsync(string ApiKey, string AccountID, string Email, string[] Groups, string[] Fields) {
            this.AddContactAsync(ApiKey, AccountID, Email, Groups, Fields, null);
        }
        
        /// <remarks/>
        public void AddContactAsync(string ApiKey, string AccountID, string Email, string[] Groups, string[] Fields, object userState) {
            if ((this.AddContactOperationCompleted == null)) {
                this.AddContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddContactOperationCompleted);
            }
            this.InvokeAsync("AddContact", new object[] {
                        ApiKey,
                        AccountID,
                        Email,
                        Groups,
                        Fields}, this.AddContactOperationCompleted, userState);
        }
        
        private void OnAddContactOperationCompleted(object arg) {
            if ((this.AddContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddContactCompleted(this, new AddContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.Update", RequestElementName="Contact.Update", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.UpdateResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.UpdateResult")]
        public object UpdateContact(string ApiKey, string AccountID, string Email, string[] Fields, string[] Groups, bool ReplaceGroups) {
            object[] results = this.Invoke("UpdateContact", new object[] {
                        ApiKey,
                        AccountID,
                        Email,
                        Fields,
                        Groups,
                        ReplaceGroups});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateContactAsync(string ApiKey, string AccountID, string Email, string[] Fields, string[] Groups, bool ReplaceGroups) {
            this.UpdateContactAsync(ApiKey, AccountID, Email, Fields, Groups, ReplaceGroups, null);
        }
        
        /// <remarks/>
        public void UpdateContactAsync(string ApiKey, string AccountID, string Email, string[] Fields, string[] Groups, bool ReplaceGroups, object userState) {
            if ((this.UpdateContactOperationCompleted == null)) {
                this.UpdateContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateContactOperationCompleted);
            }
            this.InvokeAsync("UpdateContact", new object[] {
                        ApiKey,
                        AccountID,
                        Email,
                        Fields,
                        Groups,
                        ReplaceGroups}, this.UpdateContactOperationCompleted, userState);
        }
        
        private void OnUpdateContactOperationCompleted(object arg) {
            if ((this.UpdateContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateContactCompleted(this, new UpdateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.UpdateById", RequestElementName="Contact.UpdateById", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.UpdateByIdResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.UpdateByIdResult")]
        public object UpdateContactById(string ApiKey, string AccountID, string ContactID, string[] Fields, string[] Groups, bool ReplaceGroups) {
            object[] results = this.Invoke("UpdateContactById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID,
                        Fields,
                        Groups,
                        ReplaceGroups});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateContactByIdAsync(string ApiKey, string AccountID, string ContactID, string[] Fields, string[] Groups, bool ReplaceGroups) {
            this.UpdateContactByIdAsync(ApiKey, AccountID, ContactID, Fields, Groups, ReplaceGroups, null);
        }
        
        /// <remarks/>
        public void UpdateContactByIdAsync(string ApiKey, string AccountID, string ContactID, string[] Fields, string[] Groups, bool ReplaceGroups, object userState) {
            if ((this.UpdateContactByIdOperationCompleted == null)) {
                this.UpdateContactByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateContactByIdOperationCompleted);
            }
            this.InvokeAsync("UpdateContactById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID,
                        Fields,
                        Groups,
                        ReplaceGroups}, this.UpdateContactByIdOperationCompleted, userState);
        }
        
        private void OnUpdateContactByIdOperationCompleted(object arg) {
            if ((this.UpdateContactByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateContactByIdCompleted(this, new UpdateContactByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.AddOrUpdate", RequestElementName="Contact.AddOrUpdate", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.AddOrUpdateResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.AddOrUpdateResult")]
        public object AddOrUpdateContact(string ApiKey, string AccountID, string Email, string[] Fields, string[] Groups, bool ReplaceGroups) {
            object[] results = this.Invoke("AddOrUpdateContact", new object[] {
                        ApiKey,
                        AccountID,
                        Email,
                        Fields,
                        Groups,
                        ReplaceGroups});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void AddOrUpdateContactAsync(string ApiKey, string AccountID, string Email, string[] Fields, string[] Groups, bool ReplaceGroups) {
            this.AddOrUpdateContactAsync(ApiKey, AccountID, Email, Fields, Groups, ReplaceGroups, null);
        }
        
        /// <remarks/>
        public void AddOrUpdateContactAsync(string ApiKey, string AccountID, string Email, string[] Fields, string[] Groups, bool ReplaceGroups, object userState) {
            if ((this.AddOrUpdateContactOperationCompleted == null)) {
                this.AddOrUpdateContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOrUpdateContactOperationCompleted);
            }
            this.InvokeAsync("AddOrUpdateContact", new object[] {
                        ApiKey,
                        AccountID,
                        Email,
                        Fields,
                        Groups,
                        ReplaceGroups}, this.AddOrUpdateContactOperationCompleted, userState);
        }
        
        private void OnAddOrUpdateContactOperationCompleted(object arg) {
            if ((this.AddOrUpdateContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddOrUpdateContactCompleted(this, new AddOrUpdateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.AddOrUpdateById", RequestElementName="Contact.AddOrUpdateById", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.AddOrUpdateByIdResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.AddOrUpdateByIdResult")]
        public object AddOrUpdateContactById(string ApiKey, string AccountID, string ContactID, string Email, string[] Fields, string[] Groups, bool ReplaceGroups) {
            object[] results = this.Invoke("AddOrUpdateContactById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID,
                        Email,
                        Fields,
                        Groups,
                        ReplaceGroups});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void AddOrUpdateContactByIdAsync(string ApiKey, string AccountID, string ContactID, string Email, string[] Fields, string[] Groups, bool ReplaceGroups) {
            this.AddOrUpdateContactByIdAsync(ApiKey, AccountID, ContactID, Email, Fields, Groups, ReplaceGroups, null);
        }
        
        /// <remarks/>
        public void AddOrUpdateContactByIdAsync(string ApiKey, string AccountID, string ContactID, string Email, string[] Fields, string[] Groups, bool ReplaceGroups, object userState) {
            if ((this.AddOrUpdateContactByIdOperationCompleted == null)) {
                this.AddOrUpdateContactByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOrUpdateContactByIdOperationCompleted);
            }
            this.InvokeAsync("AddOrUpdateContactById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID,
                        Email,
                        Fields,
                        Groups,
                        ReplaceGroups}, this.AddOrUpdateContactByIdOperationCompleted, userState);
        }
        
        private void OnAddOrUpdateContactByIdOperationCompleted(object arg) {
            if ((this.AddOrUpdateContactByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddOrUpdateContactByIdCompleted(this, new AddOrUpdateContactByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.Unsubscribe", RequestElementName="Contact.Unsubscribe", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.UnsubscribeResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.UnsubscribeResult")]
        public object UnsubscribeContact(string ApiKey, string AccountID, string Email) {
            object[] results = this.Invoke("UnsubscribeContact", new object[] {
                        ApiKey,
                        AccountID,
                        Email});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void UnsubscribeContactAsync(string ApiKey, string AccountID, string Email) {
            this.UnsubscribeContactAsync(ApiKey, AccountID, Email, null);
        }
        
        /// <remarks/>
        public void UnsubscribeContactAsync(string ApiKey, string AccountID, string Email, object userState) {
            if ((this.UnsubscribeContactOperationCompleted == null)) {
                this.UnsubscribeContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnsubscribeContactOperationCompleted);
            }
            this.InvokeAsync("UnsubscribeContact", new object[] {
                        ApiKey,
                        AccountID,
                        Email}, this.UnsubscribeContactOperationCompleted, userState);
        }
        
        private void OnUnsubscribeContactOperationCompleted(object arg) {
            if ((this.UnsubscribeContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnsubscribeContactCompleted(this, new UnsubscribeContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.Delete", RequestElementName="Contact.Delete", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.DeleteResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.DeleteResult")]
        public object DeleteContact(string ApiKey, string AccountID, string Email) {
            object[] results = this.Invoke("DeleteContact", new object[] {
                        ApiKey,
                        AccountID,
                        Email});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteContactAsync(string ApiKey, string AccountID, string Email) {
            this.DeleteContactAsync(ApiKey, AccountID, Email, null);
        }
        
        /// <remarks/>
        public void DeleteContactAsync(string ApiKey, string AccountID, string Email, object userState) {
            if ((this.DeleteContactOperationCompleted == null)) {
                this.DeleteContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteContactOperationCompleted);
            }
            this.InvokeAsync("DeleteContact", new object[] {
                        ApiKey,
                        AccountID,
                        Email}, this.DeleteContactOperationCompleted, userState);
        }
        
        private void OnDeleteContactOperationCompleted(object arg) {
            if ((this.DeleteContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteContactCompleted(this, new DeleteContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.DeleteById", RequestElementName="Contact.DeleteById", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.DeleteByIdResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.DeleteByIdResult")]
        public object DeleteContactById(string ApiKey, string AccountID, string ContactID) {
            object[] results = this.Invoke("DeleteContactById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteContactByIdAsync(string ApiKey, string AccountID, string ContactID) {
            this.DeleteContactByIdAsync(ApiKey, AccountID, ContactID, null);
        }
        
        /// <remarks/>
        public void DeleteContactByIdAsync(string ApiKey, string AccountID, string ContactID, object userState) {
            if ((this.DeleteContactByIdOperationCompleted == null)) {
                this.DeleteContactByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteContactByIdOperationCompleted);
            }
            this.InvokeAsync("DeleteContactById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID}, this.DeleteContactByIdOperationCompleted, userState);
        }
        
        private void OnDeleteContactByIdOperationCompleted(object arg) {
            if ((this.DeleteContactByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteContactByIdCompleted(this, new DeleteContactByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.GetDetail", RequestElementName="Contact.GetDetail", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.GetDetailResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.GetDetailResult")]
        public object GetContactDetail(string ApiKey, string AccountID, string Email) {
            object[] results = this.Invoke("GetContactDetail", new object[] {
                        ApiKey,
                        AccountID,
                        Email});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void GetContactDetailAsync(string ApiKey, string AccountID, string Email) {
            this.GetContactDetailAsync(ApiKey, AccountID, Email, null);
        }
        
        /// <remarks/>
        public void GetContactDetailAsync(string ApiKey, string AccountID, string Email, object userState) {
            if ((this.GetContactDetailOperationCompleted == null)) {
                this.GetContactDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContactDetailOperationCompleted);
            }
            this.InvokeAsync("GetContactDetail", new object[] {
                        ApiKey,
                        AccountID,
                        Email}, this.GetContactDetailOperationCompleted, userState);
        }
        
        private void OnGetContactDetailOperationCompleted(object arg) {
            if ((this.GetContactDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContactDetailCompleted(this, new GetContactDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.GetDetailById", RequestElementName="Contact.GetDetailById", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.GetDetailByIdResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.GetDetailByIdResult")]
        public object GetContactDetailById(string ApiKey, string AccountID, string ContactID) {
            object[] results = this.Invoke("GetContactDetailById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void GetContactDetailByIdAsync(string ApiKey, string AccountID, string ContactID) {
            this.GetContactDetailByIdAsync(ApiKey, AccountID, ContactID, null);
        }
        
        /// <remarks/>
        public void GetContactDetailByIdAsync(string ApiKey, string AccountID, string ContactID, object userState) {
            if ((this.GetContactDetailByIdOperationCompleted == null)) {
                this.GetContactDetailByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContactDetailByIdOperationCompleted);
            }
            this.InvokeAsync("GetContactDetailById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID}, this.GetContactDetailByIdOperationCompleted, userState);
        }
        
        private void OnGetContactDetailByIdOperationCompleted(object arg) {
            if ((this.GetContactDetailByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContactDetailByIdCompleted(this, new GetContactDetailByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.GetActivity", RequestElementName="Contact.GetActivity", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.GetActivityResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.GetActivityResult")]
        public System.Data.DataSet GetContactActivity(string ApiKey, string AccountID, string Email, string MessageID, System.DateTime FromDate, string TypesOfActivities) {
            object[] results = this.Invoke("GetContactActivity", new object[] {
                        ApiKey,
                        AccountID,
                        Email,
                        MessageID,
                        FromDate,
                        TypesOfActivities});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetContactActivityAsync(string ApiKey, string AccountID, string Email, string MessageID, System.DateTime FromDate, string TypesOfActivities) {
            this.GetContactActivityAsync(ApiKey, AccountID, Email, MessageID, FromDate, TypesOfActivities, null);
        }
        
        /// <remarks/>
        public void GetContactActivityAsync(string ApiKey, string AccountID, string Email, string MessageID, System.DateTime FromDate, string TypesOfActivities, object userState) {
            if ((this.GetContactActivityOperationCompleted == null)) {
                this.GetContactActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContactActivityOperationCompleted);
            }
            this.InvokeAsync("GetContactActivity", new object[] {
                        ApiKey,
                        AccountID,
                        Email,
                        MessageID,
                        FromDate,
                        TypesOfActivities}, this.GetContactActivityOperationCompleted, userState);
        }
        
        private void OnGetContactActivityOperationCompleted(object arg) {
            if ((this.GetContactActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContactActivityCompleted(this, new GetContactActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.GetActivityById", RequestElementName="Contact.GetActivityById", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.GetActivityByIdResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.GetActivityByIdResult")]
        public System.Data.DataSet GetContactActivityById(string ApiKey, string AccountID, string ContactID, string MessageID, System.DateTime FromDate, string TypesOfActivities) {
            object[] results = this.Invoke("GetContactActivityById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID,
                        MessageID,
                        FromDate,
                        TypesOfActivities});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetContactActivityByIdAsync(string ApiKey, string AccountID, string ContactID, string MessageID, System.DateTime FromDate, string TypesOfActivities) {
            this.GetContactActivityByIdAsync(ApiKey, AccountID, ContactID, MessageID, FromDate, TypesOfActivities, null);
        }
        
        /// <remarks/>
        public void GetContactActivityByIdAsync(string ApiKey, string AccountID, string ContactID, string MessageID, System.DateTime FromDate, string TypesOfActivities, object userState) {
            if ((this.GetContactActivityByIdOperationCompleted == null)) {
                this.GetContactActivityByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContactActivityByIdOperationCompleted);
            }
            this.InvokeAsync("GetContactActivityById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID,
                        MessageID,
                        FromDate,
                        TypesOfActivities}, this.GetContactActivityByIdOperationCompleted, userState);
        }
        
        private void OnGetContactActivityByIdOperationCompleted(object arg) {
            if ((this.GetContactActivityByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContactActivityByIdCompleted(this, new GetContactActivityByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.GetGroups", RequestElementName="Contact.GetGroups", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.GetGroupsResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.GetGroupsResult")]
        public System.Data.DataSet GetContactGroups(string ApiKey, string AccountID, string Email) {
            object[] results = this.Invoke("GetContactGroups", new object[] {
                        ApiKey,
                        AccountID,
                        Email});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetContactGroupsAsync(string ApiKey, string AccountID, string Email) {
            this.GetContactGroupsAsync(ApiKey, AccountID, Email, null);
        }
        
        /// <remarks/>
        public void GetContactGroupsAsync(string ApiKey, string AccountID, string Email, object userState) {
            if ((this.GetContactGroupsOperationCompleted == null)) {
                this.GetContactGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContactGroupsOperationCompleted);
            }
            this.InvokeAsync("GetContactGroups", new object[] {
                        ApiKey,
                        AccountID,
                        Email}, this.GetContactGroupsOperationCompleted, userState);
        }
        
        private void OnGetContactGroupsOperationCompleted(object arg) {
            if ((this.GetContactGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContactGroupsCompleted(this, new GetContactGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.GetGroupsById", RequestElementName="Contact.GetGroupsById", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.GetGroupsByIdResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.GetGroupsByIdResult")]
        public System.Data.DataSet GetContactGroupsById(string ApiKey, string AccountID, string ContactID) {
            object[] results = this.Invoke("GetContactGroupsById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetContactGroupsByIdAsync(string ApiKey, string AccountID, string ContactID) {
            this.GetContactGroupsByIdAsync(ApiKey, AccountID, ContactID, null);
        }
        
        /// <remarks/>
        public void GetContactGroupsByIdAsync(string ApiKey, string AccountID, string ContactID, object userState) {
            if ((this.GetContactGroupsByIdOperationCompleted == null)) {
                this.GetContactGroupsByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContactGroupsByIdOperationCompleted);
            }
            this.InvokeAsync("GetContactGroupsById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID}, this.GetContactGroupsByIdOperationCompleted, userState);
        }
        
        private void OnGetContactGroupsByIdOperationCompleted(object arg) {
            if ((this.GetContactGroupsByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContactGroupsByIdCompleted(this, new GetContactGroupsByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.GetAll", RequestElementName="Contact.GetAll", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.GetAllResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.GetAllResult")]
        public System.Data.DataSet GetAllContacts(string ApiKey, string AccountID, string GroupID, string OrderBy, int PageNumber, int PageSize) {
            object[] results = this.Invoke("GetAllContacts", new object[] {
                        ApiKey,
                        AccountID,
                        GroupID,
                        OrderBy,
                        PageNumber,
                        PageSize});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllContactsAsync(string ApiKey, string AccountID, string GroupID, string OrderBy, int PageNumber, int PageSize) {
            this.GetAllContactsAsync(ApiKey, AccountID, GroupID, OrderBy, PageNumber, PageSize, null);
        }
        
        /// <remarks/>
        public void GetAllContactsAsync(string ApiKey, string AccountID, string GroupID, string OrderBy, int PageNumber, int PageSize, object userState) {
            if ((this.GetAllContactsOperationCompleted == null)) {
                this.GetAllContactsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllContactsOperationCompleted);
            }
            this.InvokeAsync("GetAllContacts", new object[] {
                        ApiKey,
                        AccountID,
                        GroupID,
                        OrderBy,
                        PageNumber,
                        PageSize}, this.GetAllContactsOperationCompleted, userState);
        }
        
        private void OnGetAllContactsOperationCompleted(object arg) {
            if ((this.GetAllContactsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllContactsCompleted(this, new GetAllContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.GetStatus", RequestElementName="Contact.GetStatus", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.GetStatusResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.GetStatusResult")]
        public object GetContactStatus(string ApiKey, string AccountID, string Email) {
            object[] results = this.Invoke("GetContactStatus", new object[] {
                        ApiKey,
                        AccountID,
                        Email});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void GetContactStatusAsync(string ApiKey, string AccountID, string Email) {
            this.GetContactStatusAsync(ApiKey, AccountID, Email, null);
        }
        
        /// <remarks/>
        public void GetContactStatusAsync(string ApiKey, string AccountID, string Email, object userState) {
            if ((this.GetContactStatusOperationCompleted == null)) {
                this.GetContactStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContactStatusOperationCompleted);
            }
            this.InvokeAsync("GetContactStatus", new object[] {
                        ApiKey,
                        AccountID,
                        Email}, this.GetContactStatusOperationCompleted, userState);
        }
        
        private void OnGetContactStatusOperationCompleted(object arg) {
            if ((this.GetContactStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContactStatusCompleted(this, new GetContactStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.GetStatusById", RequestElementName="Contact.GetStatusById", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.GetStatusByIdResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.GetStatusByIdResult")]
        public object GetContactStatusById(string ApiKey, string AccountID, string ContactID) {
            object[] results = this.Invoke("GetContactStatusById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void GetContactStatusByIdAsync(string ApiKey, string AccountID, string ContactID) {
            this.GetContactStatusByIdAsync(ApiKey, AccountID, ContactID, null);
        }
        
        /// <remarks/>
        public void GetContactStatusByIdAsync(string ApiKey, string AccountID, string ContactID, object userState) {
            if ((this.GetContactStatusByIdOperationCompleted == null)) {
                this.GetContactStatusByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContactStatusByIdOperationCompleted);
            }
            this.InvokeAsync("GetContactStatusById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID}, this.GetContactStatusByIdOperationCompleted, userState);
        }
        
        private void OnGetContactStatusByIdOperationCompleted(object arg) {
            if ((this.GetContactStatusByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContactStatusByIdCompleted(this, new GetContactStatusByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.Activate", RequestElementName="Contact.Activate", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.ActivateResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.ActivateResult")]
        public object ActivateContact(string ApiKey, string AccountID, string Email) {
            object[] results = this.Invoke("ActivateContact", new object[] {
                        ApiKey,
                        AccountID,
                        Email});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateContactAsync(string ApiKey, string AccountID, string Email) {
            this.ActivateContactAsync(ApiKey, AccountID, Email, null);
        }
        
        /// <remarks/>
        public void ActivateContactAsync(string ApiKey, string AccountID, string Email, object userState) {
            if ((this.ActivateContactOperationCompleted == null)) {
                this.ActivateContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateContactOperationCompleted);
            }
            this.InvokeAsync("ActivateContact", new object[] {
                        ApiKey,
                        AccountID,
                        Email}, this.ActivateContactOperationCompleted, userState);
        }
        
        private void OnActivateContactOperationCompleted(object arg) {
            if ((this.ActivateContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateContactCompleted(this, new ActivateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.ActivateById", RequestElementName="Contact.ActivateById", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.ActivateByIdResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.ActivateByIdResult")]
        public object ActivateContactById(string ApiKey, string AccountID, string ContactID) {
            object[] results = this.Invoke("ActivateContactById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateContactByIdAsync(string ApiKey, string AccountID, string ContactID) {
            this.ActivateContactByIdAsync(ApiKey, AccountID, ContactID, null);
        }
        
        /// <remarks/>
        public void ActivateContactByIdAsync(string ApiKey, string AccountID, string ContactID, object userState) {
            if ((this.ActivateContactByIdOperationCompleted == null)) {
                this.ActivateContactByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateContactByIdOperationCompleted);
            }
            this.InvokeAsync("ActivateContactById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID}, this.ActivateContactByIdOperationCompleted, userState);
        }
        
        private void OnActivateContactByIdOperationCompleted(object arg) {
            if ((this.ActivateContactByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateContactByIdCompleted(this, new ActivateContactByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.Deactivate", RequestElementName="Contact.Deactivate", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.DeactivateResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.DeactivateResult")]
        public object DeactivateContact(string ApiKey, string AccountID, string Email) {
            object[] results = this.Invoke("DeactivateContact", new object[] {
                        ApiKey,
                        AccountID,
                        Email});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void DeactivateContactAsync(string ApiKey, string AccountID, string Email) {
            this.DeactivateContactAsync(ApiKey, AccountID, Email, null);
        }
        
        /// <remarks/>
        public void DeactivateContactAsync(string ApiKey, string AccountID, string Email, object userState) {
            if ((this.DeactivateContactOperationCompleted == null)) {
                this.DeactivateContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeactivateContactOperationCompleted);
            }
            this.InvokeAsync("DeactivateContact", new object[] {
                        ApiKey,
                        AccountID,
                        Email}, this.DeactivateContactOperationCompleted, userState);
        }
        
        private void OnDeactivateContactOperationCompleted(object arg) {
            if ((this.DeactivateContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeactivateContactCompleted(this, new DeactivateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Contact.DeactivateById", RequestElementName="Contact.DeactivateById", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Contact.DeactivateByIdResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Contact.DeactivateByIdResult")]
        public object DeactivateContactById(string ApiKey, string AccountID, string ContactID) {
            object[] results = this.Invoke("DeactivateContactById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void DeactivateContactByIdAsync(string ApiKey, string AccountID, string ContactID) {
            this.DeactivateContactByIdAsync(ApiKey, AccountID, ContactID, null);
        }
        
        /// <remarks/>
        public void DeactivateContactByIdAsync(string ApiKey, string AccountID, string ContactID, object userState) {
            if ((this.DeactivateContactByIdOperationCompleted == null)) {
                this.DeactivateContactByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeactivateContactByIdOperationCompleted);
            }
            this.InvokeAsync("DeactivateContactById", new object[] {
                        ApiKey,
                        AccountID,
                        ContactID}, this.DeactivateContactByIdOperationCompleted, userState);
        }
        
        private void OnDeactivateContactByIdOperationCompleted(object arg) {
            if ((this.DeactivateContactByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeactivateContactByIdCompleted(this, new DeactivateContactByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Field.AddOrUpdate", RequestElementName="Field.AddOrUpdate", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="Field.AddOrUpdateResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Field.AddOrUpdateResult")]
        public object AddOrUpdateContactField(string ApiKey, string AccountID, string Email, string CustomFieldName, string CustomFieldContent) {
            object[] results = this.Invoke("AddOrUpdateContactField", new object[] {
                        ApiKey,
                        AccountID,
                        Email,
                        CustomFieldName,
                        CustomFieldContent});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void AddOrUpdateContactFieldAsync(string ApiKey, string AccountID, string Email, string CustomFieldName, string CustomFieldContent) {
            this.AddOrUpdateContactFieldAsync(ApiKey, AccountID, Email, CustomFieldName, CustomFieldContent, null);
        }
        
        /// <remarks/>
        public void AddOrUpdateContactFieldAsync(string ApiKey, string AccountID, string Email, string CustomFieldName, string CustomFieldContent, object userState) {
            if ((this.AddOrUpdateContactFieldOperationCompleted == null)) {
                this.AddOrUpdateContactFieldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOrUpdateContactFieldOperationCompleted);
            }
            this.InvokeAsync("AddOrUpdateContactField", new object[] {
                        ApiKey,
                        AccountID,
                        Email,
                        CustomFieldName,
                        CustomFieldContent}, this.AddOrUpdateContactFieldOperationCompleted, userState);
        }
        
        private void OnAddOrUpdateContactFieldOperationCompleted(object arg) {
            if ((this.AddOrUpdateContactFieldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddOrUpdateContactFieldCompleted(this, new AddOrUpdateContactFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/SimpleCampaign.GetAll", RequestElementName="SimpleCampaign.GetAll", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="SimpleCampaign.GetAllResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SimpleCampaign.GetAllResult")]
        public System.Data.DataSet GetAllSimpleCampaigns(string ApiKey, string AccountID, string CategoryID, int StatusCode, string FromDateCreated, int PageNumber, int PageSize) {
            object[] results = this.Invoke("GetAllSimpleCampaigns", new object[] {
                        ApiKey,
                        AccountID,
                        CategoryID,
                        StatusCode,
                        FromDateCreated,
                        PageNumber,
                        PageSize});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllSimpleCampaignsAsync(string ApiKey, string AccountID, string CategoryID, int StatusCode, string FromDateCreated, int PageNumber, int PageSize) {
            this.GetAllSimpleCampaignsAsync(ApiKey, AccountID, CategoryID, StatusCode, FromDateCreated, PageNumber, PageSize, null);
        }
        
        /// <remarks/>
        public void GetAllSimpleCampaignsAsync(string ApiKey, string AccountID, string CategoryID, int StatusCode, string FromDateCreated, int PageNumber, int PageSize, object userState) {
            if ((this.GetAllSimpleCampaignsOperationCompleted == null)) {
                this.GetAllSimpleCampaignsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSimpleCampaignsOperationCompleted);
            }
            this.InvokeAsync("GetAllSimpleCampaigns", new object[] {
                        ApiKey,
                        AccountID,
                        CategoryID,
                        StatusCode,
                        FromDateCreated,
                        PageNumber,
                        PageSize}, this.GetAllSimpleCampaignsOperationCompleted, userState);
        }
        
        private void OnGetAllSimpleCampaignsOperationCompleted(object arg) {
            if ((this.GetAllSimpleCampaignsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllSimpleCampaignsCompleted(this, new GetAllSimpleCampaignsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/SimpleCampaign.Create", RequestElementName="SimpleCampaign.Create", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="SimpleCampaign.CreateResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SimpleCampaign.CreateResult")]
        public object CreateSimpleCampaign(
                    string ApiKey, 
                    string AccountID, 
                    string CategoryID, 
                    string Subject, 
                    string NameFrom, 
                    string MailFrom, 
                    string MailReplyTo, 
                    string HTMLContent, 
                    string TEXTContent, 
                    string TargetGroupsIDs, 
                    int Language, 
                    bool HTMLOpenTracking, 
                    bool HTMLClickTracking, 
                    bool TextClickTracking, 
                    string ClickTrackingExceptions, 
                    string ContentType, 
                    string Charset, 
                    string MimeEncoding) {
            object[] results = this.Invoke("CreateSimpleCampaign", new object[] {
                        ApiKey,
                        AccountID,
                        CategoryID,
                        Subject,
                        NameFrom,
                        MailFrom,
                        MailReplyTo,
                        HTMLContent,
                        TEXTContent,
                        TargetGroupsIDs,
                        Language,
                        HTMLOpenTracking,
                        HTMLClickTracking,
                        TextClickTracking,
                        ClickTrackingExceptions,
                        ContentType,
                        Charset,
                        MimeEncoding});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSimpleCampaignAsync(
                    string ApiKey, 
                    string AccountID, 
                    string CategoryID, 
                    string Subject, 
                    string NameFrom, 
                    string MailFrom, 
                    string MailReplyTo, 
                    string HTMLContent, 
                    string TEXTContent, 
                    string TargetGroupsIDs, 
                    int Language, 
                    bool HTMLOpenTracking, 
                    bool HTMLClickTracking, 
                    bool TextClickTracking, 
                    string ClickTrackingExceptions, 
                    string ContentType, 
                    string Charset, 
                    string MimeEncoding) {
            this.CreateSimpleCampaignAsync(ApiKey, AccountID, CategoryID, Subject, NameFrom, MailFrom, MailReplyTo, HTMLContent, TEXTContent, TargetGroupsIDs, Language, HTMLOpenTracking, HTMLClickTracking, TextClickTracking, ClickTrackingExceptions, ContentType, Charset, MimeEncoding, null);
        }
        
        /// <remarks/>
        public void CreateSimpleCampaignAsync(
                    string ApiKey, 
                    string AccountID, 
                    string CategoryID, 
                    string Subject, 
                    string NameFrom, 
                    string MailFrom, 
                    string MailReplyTo, 
                    string HTMLContent, 
                    string TEXTContent, 
                    string TargetGroupsIDs, 
                    int Language, 
                    bool HTMLOpenTracking, 
                    bool HTMLClickTracking, 
                    bool TextClickTracking, 
                    string ClickTrackingExceptions, 
                    string ContentType, 
                    string Charset, 
                    string MimeEncoding, 
                    object userState) {
            if ((this.CreateSimpleCampaignOperationCompleted == null)) {
                this.CreateSimpleCampaignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSimpleCampaignOperationCompleted);
            }
            this.InvokeAsync("CreateSimpleCampaign", new object[] {
                        ApiKey,
                        AccountID,
                        CategoryID,
                        Subject,
                        NameFrom,
                        MailFrom,
                        MailReplyTo,
                        HTMLContent,
                        TEXTContent,
                        TargetGroupsIDs,
                        Language,
                        HTMLOpenTracking,
                        HTMLClickTracking,
                        TextClickTracking,
                        ClickTrackingExceptions,
                        ContentType,
                        Charset,
                        MimeEncoding}, this.CreateSimpleCampaignOperationCompleted, userState);
        }
        
        private void OnCreateSimpleCampaignOperationCompleted(object arg) {
            if ((this.CreateSimpleCampaignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSimpleCampaignCompleted(this, new CreateSimpleCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/SimpleCampaign.Update", RequestElementName="SimpleCampaign.Update", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="SimpleCampaign.UpdateResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SimpleCampaign.UpdateResult")]
        public object UpdateSimpleCampaign(
                    string ApiKey, 
                    string AccountID, 
                    string CampaignID, 
                    string CategoryID, 
                    string Subject, 
                    string NameFrom, 
                    string MailFrom, 
                    string MailReplyTo, 
                    string HTMLContent, 
                    string TEXTContent, 
                    string TargetGroupsIDs, 
                    int Language, 
                    bool HTMLOpenTracking, 
                    bool HTMLClickTracking, 
                    bool TextClickTracking, 
                    string ClickTrackingExceptions, 
                    string ContentType, 
                    string Charset, 
                    string MimeEncoding) {
            object[] results = this.Invoke("UpdateSimpleCampaign", new object[] {
                        ApiKey,
                        AccountID,
                        CampaignID,
                        CategoryID,
                        Subject,
                        NameFrom,
                        MailFrom,
                        MailReplyTo,
                        HTMLContent,
                        TEXTContent,
                        TargetGroupsIDs,
                        Language,
                        HTMLOpenTracking,
                        HTMLClickTracking,
                        TextClickTracking,
                        ClickTrackingExceptions,
                        ContentType,
                        Charset,
                        MimeEncoding});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSimpleCampaignAsync(
                    string ApiKey, 
                    string AccountID, 
                    string CampaignID, 
                    string CategoryID, 
                    string Subject, 
                    string NameFrom, 
                    string MailFrom, 
                    string MailReplyTo, 
                    string HTMLContent, 
                    string TEXTContent, 
                    string TargetGroupsIDs, 
                    int Language, 
                    bool HTMLOpenTracking, 
                    bool HTMLClickTracking, 
                    bool TextClickTracking, 
                    string ClickTrackingExceptions, 
                    string ContentType, 
                    string Charset, 
                    string MimeEncoding) {
            this.UpdateSimpleCampaignAsync(ApiKey, AccountID, CampaignID, CategoryID, Subject, NameFrom, MailFrom, MailReplyTo, HTMLContent, TEXTContent, TargetGroupsIDs, Language, HTMLOpenTracking, HTMLClickTracking, TextClickTracking, ClickTrackingExceptions, ContentType, Charset, MimeEncoding, null);
        }
        
        /// <remarks/>
        public void UpdateSimpleCampaignAsync(
                    string ApiKey, 
                    string AccountID, 
                    string CampaignID, 
                    string CategoryID, 
                    string Subject, 
                    string NameFrom, 
                    string MailFrom, 
                    string MailReplyTo, 
                    string HTMLContent, 
                    string TEXTContent, 
                    string TargetGroupsIDs, 
                    int Language, 
                    bool HTMLOpenTracking, 
                    bool HTMLClickTracking, 
                    bool TextClickTracking, 
                    string ClickTrackingExceptions, 
                    string ContentType, 
                    string Charset, 
                    string MimeEncoding, 
                    object userState) {
            if ((this.UpdateSimpleCampaignOperationCompleted == null)) {
                this.UpdateSimpleCampaignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSimpleCampaignOperationCompleted);
            }
            this.InvokeAsync("UpdateSimpleCampaign", new object[] {
                        ApiKey,
                        AccountID,
                        CampaignID,
                        CategoryID,
                        Subject,
                        NameFrom,
                        MailFrom,
                        MailReplyTo,
                        HTMLContent,
                        TEXTContent,
                        TargetGroupsIDs,
                        Language,
                        HTMLOpenTracking,
                        HTMLClickTracking,
                        TextClickTracking,
                        ClickTrackingExceptions,
                        ContentType,
                        Charset,
                        MimeEncoding}, this.UpdateSimpleCampaignOperationCompleted, userState);
        }
        
        private void OnUpdateSimpleCampaignOperationCompleted(object arg) {
            if ((this.UpdateSimpleCampaignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSimpleCampaignCompleted(this, new UpdateSimpleCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/SimpleCampaign.Delete", RequestElementName="SimpleCampaign.Delete", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="SimpleCampaign.DeleteResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SimpleCampaign.DeleteResult")]
        public object DeleteSimpleCampaign(string ApiKey, string AccountID, string CampaignID) {
            object[] results = this.Invoke("DeleteSimpleCampaign", new object[] {
                        ApiKey,
                        AccountID,
                        CampaignID});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteSimpleCampaignAsync(string ApiKey, string AccountID, string CampaignID) {
            this.DeleteSimpleCampaignAsync(ApiKey, AccountID, CampaignID, null);
        }
        
        /// <remarks/>
        public void DeleteSimpleCampaignAsync(string ApiKey, string AccountID, string CampaignID, object userState) {
            if ((this.DeleteSimpleCampaignOperationCompleted == null)) {
                this.DeleteSimpleCampaignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSimpleCampaignOperationCompleted);
            }
            this.InvokeAsync("DeleteSimpleCampaign", new object[] {
                        ApiKey,
                        AccountID,
                        CampaignID}, this.DeleteSimpleCampaignOperationCompleted, userState);
        }
        
        private void OnDeleteSimpleCampaignOperationCompleted(object arg) {
            if ((this.DeleteSimpleCampaignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSimpleCampaignCompleted(this, new DeleteSimpleCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/SimpleCampaign.Send", RequestElementName="SimpleCampaign.Send", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="SimpleCampaign.SendResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SimpleCampaign.SendResult")]
        public object SendSimpleCampaign(string ApiKey, string AccountID, string CampaignID) {
            object[] results = this.Invoke("SendSimpleCampaign", new object[] {
                        ApiKey,
                        AccountID,
                        CampaignID});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void SendSimpleCampaignAsync(string ApiKey, string AccountID, string CampaignID) {
            this.SendSimpleCampaignAsync(ApiKey, AccountID, CampaignID, null);
        }
        
        /// <remarks/>
        public void SendSimpleCampaignAsync(string ApiKey, string AccountID, string CampaignID, object userState) {
            if ((this.SendSimpleCampaignOperationCompleted == null)) {
                this.SendSimpleCampaignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSimpleCampaignOperationCompleted);
            }
            this.InvokeAsync("SendSimpleCampaign", new object[] {
                        ApiKey,
                        AccountID,
                        CampaignID}, this.SendSimpleCampaignOperationCompleted, userState);
        }
        
        private void OnSendSimpleCampaignOperationCompleted(object arg) {
            if ((this.SendSimpleCampaignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSimpleCampaignCompleted(this, new SendSimpleCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/SimpleCampaign.Schedule", RequestElementName="SimpleCampaign.Schedule", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="SimpleCampaign.ScheduleResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SimpleCampaign.ScheduleResult")]
        public object ScheduleSimpleCampaign(string ApiKey, string AccountID, string CampaignID, string ScheduleTime) {
            object[] results = this.Invoke("ScheduleSimpleCampaign", new object[] {
                        ApiKey,
                        AccountID,
                        CampaignID,
                        ScheduleTime});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void ScheduleSimpleCampaignAsync(string ApiKey, string AccountID, string CampaignID, string ScheduleTime) {
            this.ScheduleSimpleCampaignAsync(ApiKey, AccountID, CampaignID, ScheduleTime, null);
        }
        
        /// <remarks/>
        public void ScheduleSimpleCampaignAsync(string ApiKey, string AccountID, string CampaignID, string ScheduleTime, object userState) {
            if ((this.ScheduleSimpleCampaignOperationCompleted == null)) {
                this.ScheduleSimpleCampaignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnScheduleSimpleCampaignOperationCompleted);
            }
            this.InvokeAsync("ScheduleSimpleCampaign", new object[] {
                        ApiKey,
                        AccountID,
                        CampaignID,
                        ScheduleTime}, this.ScheduleSimpleCampaignOperationCompleted, userState);
        }
        
        private void OnScheduleSimpleCampaignOperationCompleted(object arg) {
            if ((this.ScheduleSimpleCampaignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ScheduleSimpleCampaignCompleted(this, new ScheduleSimpleCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/SimpleCampaign.GetDetail", RequestElementName="SimpleCampaign.GetDetail", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="SimpleCampaign.GetDetailResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SimpleCampaign.GetDetailResult")]
        public object GetSimpleCampaignDetail(string ApiKey, string AccountID, string CampaignID) {
            object[] results = this.Invoke("GetSimpleCampaignDetail", new object[] {
                        ApiKey,
                        AccountID,
                        CampaignID});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void GetSimpleCampaignDetailAsync(string ApiKey, string AccountID, string CampaignID) {
            this.GetSimpleCampaignDetailAsync(ApiKey, AccountID, CampaignID, null);
        }
        
        /// <remarks/>
        public void GetSimpleCampaignDetailAsync(string ApiKey, string AccountID, string CampaignID, object userState) {
            if ((this.GetSimpleCampaignDetailOperationCompleted == null)) {
                this.GetSimpleCampaignDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSimpleCampaignDetailOperationCompleted);
            }
            this.InvokeAsync("GetSimpleCampaignDetail", new object[] {
                        ApiKey,
                        AccountID,
                        CampaignID}, this.GetSimpleCampaignDetailOperationCompleted, userState);
        }
        
        private void OnGetSimpleCampaignDetailOperationCompleted(object arg) {
            if ((this.GetSimpleCampaignDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSimpleCampaignDetailCompleted(this, new GetSimpleCampaignDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/SimpleCampaign.ReportRecipients", RequestElementName="SimpleCampaign.ReportRecipients", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="SimpleCampaign.ReportRecipientsResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SimpleCampaign.ReportRecipientsResult")]
        public System.Data.DataSet ReportRecipientsSimpleCampaign(string ApiKey, string AccountID, string CampaignID, int PageNumber, int PageSize) {
            object[] results = this.Invoke("ReportRecipientsSimpleCampaign", new object[] {
                        ApiKey,
                        AccountID,
                        CampaignID,
                        PageNumber,
                        PageSize});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReportRecipientsSimpleCampaignAsync(string ApiKey, string AccountID, string CampaignID, int PageNumber, int PageSize) {
            this.ReportRecipientsSimpleCampaignAsync(ApiKey, AccountID, CampaignID, PageNumber, PageSize, null);
        }
        
        /// <remarks/>
        public void ReportRecipientsSimpleCampaignAsync(string ApiKey, string AccountID, string CampaignID, int PageNumber, int PageSize, object userState) {
            if ((this.ReportRecipientsSimpleCampaignOperationCompleted == null)) {
                this.ReportRecipientsSimpleCampaignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportRecipientsSimpleCampaignOperationCompleted);
            }
            this.InvokeAsync("ReportRecipientsSimpleCampaign", new object[] {
                        ApiKey,
                        AccountID,
                        CampaignID,
                        PageNumber,
                        PageSize}, this.ReportRecipientsSimpleCampaignOperationCompleted, userState);
        }
        
        private void OnReportRecipientsSimpleCampaignOperationCompleted(object arg) {
            if ((this.ReportRecipientsSimpleCampaignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportRecipientsSimpleCampaignCompleted(this, new ReportRecipientsSimpleCampaignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/SimpleCampaign.ReportUniqueOpens", RequestElementName="SimpleCampaign.ReportUniqueOpens", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="SimpleCampaign.ReportUniqueOpensResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SimpleCampaign.ReportUniqueOpensResult")]
        public System.Data.DataSet ReportUniqueOpensSimpleCampaigns(string ApiKey, string AccountID, string CampaignID, int PageNumber, int PageSize) {
            object[] results = this.Invoke("ReportUniqueOpensSimpleCampaigns", new object[] {
                        ApiKey,
                        AccountID,
                        CampaignID,
                        PageNumber,
                        PageSize});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReportUniqueOpensSimpleCampaignsAsync(string ApiKey, string AccountID, string CampaignID, int PageNumber, int PageSize) {
            this.ReportUniqueOpensSimpleCampaignsAsync(ApiKey, AccountID, CampaignID, PageNumber, PageSize, null);
        }
        
        /// <remarks/>
        public void ReportUniqueOpensSimpleCampaignsAsync(string ApiKey, string AccountID, string CampaignID, int PageNumber, int PageSize, object userState) {
            if ((this.ReportUniqueOpensSimpleCampaignsOperationCompleted == null)) {
                this.ReportUniqueOpensSimpleCampaignsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportUniqueOpensSimpleCampaignsOperationCompleted);
            }
            this.InvokeAsync("ReportUniqueOpensSimpleCampaigns", new object[] {
                        ApiKey,
                        AccountID,
                        CampaignID,
                        PageNumber,
                        PageSize}, this.ReportUniqueOpensSimpleCampaignsOperationCompleted, userState);
        }
        
        private void OnReportUniqueOpensSimpleCampaignsOperationCompleted(object arg) {
            if ((this.ReportUniqueOpensSimpleCampaignsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportUniqueOpensSimpleCampaignsCompleted(this, new ReportUniqueOpensSimpleCampaignsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/SimpleCampaign.ReportUniqueClicks", RequestElementName="SimpleCampaign.ReportUniqueClicks", RequestNamespace="http://api.gbcorreo.net/", ResponseElementName="SimpleCampaign.ReportUniqueClicksResponse", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SimpleCampaign.ReportUniqueClicksResult")]
        public System.Data.DataSet ReportUniqueClicksSimpleCampaigns(string ApiKey, string AccountID, string CampaignID, int PageNumber, int PageSize) {
            object[] results = this.Invoke("ReportUniqueClicksSimpleCampaigns", new object[] {
                        ApiKey,
                        AccountID,
                        CampaignID,
                        PageNumber,
                        PageSize});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReportUniqueClicksSimpleCampaignsAsync(string ApiKey, string AccountID, string CampaignID, int PageNumber, int PageSize) {
            this.ReportUniqueClicksSimpleCampaignsAsync(ApiKey, AccountID, CampaignID, PageNumber, PageSize, null);
        }
        
        /// <remarks/>
        public void ReportUniqueClicksSimpleCampaignsAsync(string ApiKey, string AccountID, string CampaignID, int PageNumber, int PageSize, object userState) {
            if ((this.ReportUniqueClicksSimpleCampaignsOperationCompleted == null)) {
                this.ReportUniqueClicksSimpleCampaignsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportUniqueClicksSimpleCampaignsOperationCompleted);
            }
            this.InvokeAsync("ReportUniqueClicksSimpleCampaigns", new object[] {
                        ApiKey,
                        AccountID,
                        CampaignID,
                        PageNumber,
                        PageSize}, this.ReportUniqueClicksSimpleCampaignsOperationCompleted, userState);
        }
        
        private void OnReportUniqueClicksSimpleCampaignsOperationCompleted(object arg) {
            if ((this.ReportUniqueClicksSimpleCampaignsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportUniqueClicksSimpleCampaignsCompleted(this, new ReportUniqueClicksSimpleCampaignsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://api.gbcorreo.net/Test", RequestNamespace="http://api.gbcorreo.net/", ResponseNamespace="http://api.gbcorreo.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object Test(string ApiKey, string AccountID) {
            object[] results = this.Invoke("Test", new object[] {
                        ApiKey,
                        AccountID});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void TestAsync(string ApiKey, string AccountID) {
            this.TestAsync(ApiKey, AccountID, null);
        }
        
        /// <remarks/>
        public void TestAsync(string ApiKey, string AccountID, object userState) {
            if ((this.TestOperationCompleted == null)) {
                this.TestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestOperationCompleted);
            }
            this.InvokeAsync("Test", new object[] {
                        ApiKey,
                        AccountID}, this.TestOperationCompleted, userState);
        }
        
        private void OnTestOperationCompleted(object arg) {
            if ((this.TestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestCompleted(this, new TestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.gbcorreo.net/")]
    public partial class ErrorResult {
        
        private string codeField;
        
        private string descriptionField;
        
        /// <remarks/>
        public string Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.gbcorreo.net/")]
    public partial class Group {
        
        private string groupIDField;
        
        private string groupNameField;
        
        private string parentGroupIDField;
        
        private string groupDescriptionField;
        
        private int cActivesField;
        
        private int cDesactivedField;
        
        private int cUnsubscribedField;
        
        private int cComplaintsField;
        
        private int cBouncedField;
        
        private int cUnconfirmedField;
        
        private bool isPublicField;
        
        private string publicNameField;
        
        private System.DateTime dateCreatedField;
        
        private int groupTypeField;
        
        /// <remarks/>
        public string GroupID {
            get {
                return this.groupIDField;
            }
            set {
                this.groupIDField = value;
            }
        }
        
        /// <remarks/>
        public string GroupName {
            get {
                return this.groupNameField;
            }
            set {
                this.groupNameField = value;
            }
        }
        
        /// <remarks/>
        public string ParentGroupID {
            get {
                return this.parentGroupIDField;
            }
            set {
                this.parentGroupIDField = value;
            }
        }
        
        /// <remarks/>
        public string GroupDescription {
            get {
                return this.groupDescriptionField;
            }
            set {
                this.groupDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public int CActives {
            get {
                return this.cActivesField;
            }
            set {
                this.cActivesField = value;
            }
        }
        
        /// <remarks/>
        public int CDesactived {
            get {
                return this.cDesactivedField;
            }
            set {
                this.cDesactivedField = value;
            }
        }
        
        /// <remarks/>
        public int CUnsubscribed {
            get {
                return this.cUnsubscribedField;
            }
            set {
                this.cUnsubscribedField = value;
            }
        }
        
        /// <remarks/>
        public int CComplaints {
            get {
                return this.cComplaintsField;
            }
            set {
                this.cComplaintsField = value;
            }
        }
        
        /// <remarks/>
        public int CBounced {
            get {
                return this.cBouncedField;
            }
            set {
                this.cBouncedField = value;
            }
        }
        
        /// <remarks/>
        public int CUnconfirmed {
            get {
                return this.cUnconfirmedField;
            }
            set {
                this.cUnconfirmedField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPublic {
            get {
                return this.isPublicField;
            }
            set {
                this.isPublicField = value;
            }
        }
        
        /// <remarks/>
        public string PublicName {
            get {
                return this.publicNameField;
            }
            set {
                this.publicNameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        public int GroupType {
            get {
                return this.groupTypeField;
            }
            set {
                this.groupTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.gbcorreo.net/")]
    public partial class Contact {
        
        private string contactIDField;
        
        private string emailField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string personalIDField;
        
        private string addressField;
        
        private string postalCodeField;
        
        private System.DateTime birthdayField;
        
        private string phoneField;
        
        private string cellphoneField;
        
        private int statusCodeField;
        
        private string statusDescriptionField;
        
        private System.DateTime dateCreatedField;
        
        private System.DateTime lastActivityField;
        
        private string cityField;
        
        private string stateField;
        
        private string countryField;
        
        private string customField1Field;
        
        private string customField2Field;
        
        private string customField3Field;
        
        private string customField4Field;
        
        private string customField5Field;
        
        private string customField6Field;
        
        private string customField7Field;
        
        private string customField8Field;
        
        private string customField9Field;
        
        private string customField10Field;
        
        private string customField11Field;
        
        private string customField12Field;
        
        private string customField13Field;
        
        private string customField14Field;
        
        private string customField15Field;
        
        private string customField16Field;
        
        private string customField17Field;
        
        private string customField18Field;
        
        private string customField19Field;
        
        private string customField20Field;
        
        /// <remarks/>
        public string ContactID {
            get {
                return this.contactIDField;
            }
            set {
                this.contactIDField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string PersonalID {
            get {
                return this.personalIDField;
            }
            set {
                this.personalIDField = value;
            }
        }
        
        /// <remarks/>
        public string Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        public string PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Birthday {
            get {
                return this.birthdayField;
            }
            set {
                this.birthdayField = value;
            }
        }
        
        /// <remarks/>
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        public string Cellphone {
            get {
                return this.cellphoneField;
            }
            set {
                this.cellphoneField = value;
            }
        }
        
        /// <remarks/>
        public int StatusCode {
            get {
                return this.statusCodeField;
            }
            set {
                this.statusCodeField = value;
            }
        }
        
        /// <remarks/>
        public string StatusDescription {
            get {
                return this.statusDescriptionField;
            }
            set {
                this.statusDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastActivity {
            get {
                return this.lastActivityField;
            }
            set {
                this.lastActivityField = value;
            }
        }
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        public string CustomField1 {
            get {
                return this.customField1Field;
            }
            set {
                this.customField1Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField2 {
            get {
                return this.customField2Field;
            }
            set {
                this.customField2Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField3 {
            get {
                return this.customField3Field;
            }
            set {
                this.customField3Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField4 {
            get {
                return this.customField4Field;
            }
            set {
                this.customField4Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField5 {
            get {
                return this.customField5Field;
            }
            set {
                this.customField5Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField6 {
            get {
                return this.customField6Field;
            }
            set {
                this.customField6Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField7 {
            get {
                return this.customField7Field;
            }
            set {
                this.customField7Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField8 {
            get {
                return this.customField8Field;
            }
            set {
                this.customField8Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField9 {
            get {
                return this.customField9Field;
            }
            set {
                this.customField9Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField10 {
            get {
                return this.customField10Field;
            }
            set {
                this.customField10Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField11 {
            get {
                return this.customField11Field;
            }
            set {
                this.customField11Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField12 {
            get {
                return this.customField12Field;
            }
            set {
                this.customField12Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField13 {
            get {
                return this.customField13Field;
            }
            set {
                this.customField13Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField14 {
            get {
                return this.customField14Field;
            }
            set {
                this.customField14Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField15 {
            get {
                return this.customField15Field;
            }
            set {
                this.customField15Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField16 {
            get {
                return this.customField16Field;
            }
            set {
                this.customField16Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField17 {
            get {
                return this.customField17Field;
            }
            set {
                this.customField17Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField18 {
            get {
                return this.customField18Field;
            }
            set {
                this.customField18Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField19 {
            get {
                return this.customField19Field;
            }
            set {
                this.customField19Field = value;
            }
        }
        
        /// <remarks/>
        public string CustomField20 {
            get {
                return this.customField20Field;
            }
            set {
                this.customField20Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.gbcorreo.net/")]
    public partial class ContactStatus {
        
        private int statusCodeField;
        
        private string statusDescriptionField;
        
        /// <remarks/>
        public int StatusCode {
            get {
                return this.statusCodeField;
            }
            set {
                this.statusCodeField = value;
            }
        }
        
        /// <remarks/>
        public string StatusDescription {
            get {
                return this.statusDescriptionField;
            }
            set {
                this.statusDescriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://api.gbcorreo.net/")]
    public partial class SimpleCampaign {
        
        private string campaignIDField;
        
        private string categoryIDField;
        
        private System.DateTime createdField;
        
        private System.DateTime modifiedField;
        
        private string guidField;
        
        private string messageIDField;
        
        private int statusCodeField;
        
        private string statusDescriptionField;
        
        private string subjectField;
        
        private string nameFromField;
        
        private string mailFromField;
        
        private string mailReplyToField;
        
        private string hTMLContentField;
        
        private string tEXTContentField;
        
        private int languageField;
        
        private bool hTMLOpenTrackingField;
        
        private bool hTMLClickTrackingField;
        
        private bool textClickTrackingField;
        
        private string clickTrackingExceptionsField;
        
        private string contentTypeField;
        
        private string charsetField;
        
        private string mimeEncodingField;
        
        /// <remarks/>
        public string CampaignID {
            get {
                return this.campaignIDField;
            }
            set {
                this.campaignIDField = value;
            }
        }
        
        /// <remarks/>
        public string CategoryID {
            get {
                return this.categoryIDField;
            }
            set {
                this.categoryIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Created {
            get {
                return this.createdField;
            }
            set {
                this.createdField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Modified {
            get {
                return this.modifiedField;
            }
            set {
                this.modifiedField = value;
            }
        }
        
        /// <remarks/>
        public string Guid {
            get {
                return this.guidField;
            }
            set {
                this.guidField = value;
            }
        }
        
        /// <remarks/>
        public string MessageID {
            get {
                return this.messageIDField;
            }
            set {
                this.messageIDField = value;
            }
        }
        
        /// <remarks/>
        public int StatusCode {
            get {
                return this.statusCodeField;
            }
            set {
                this.statusCodeField = value;
            }
        }
        
        /// <remarks/>
        public string StatusDescription {
            get {
                return this.statusDescriptionField;
            }
            set {
                this.statusDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public string NameFrom {
            get {
                return this.nameFromField;
            }
            set {
                this.nameFromField = value;
            }
        }
        
        /// <remarks/>
        public string MailFrom {
            get {
                return this.mailFromField;
            }
            set {
                this.mailFromField = value;
            }
        }
        
        /// <remarks/>
        public string MailReplyTo {
            get {
                return this.mailReplyToField;
            }
            set {
                this.mailReplyToField = value;
            }
        }
        
        /// <remarks/>
        public string HTMLContent {
            get {
                return this.hTMLContentField;
            }
            set {
                this.hTMLContentField = value;
            }
        }
        
        /// <remarks/>
        public string TEXTContent {
            get {
                return this.tEXTContentField;
            }
            set {
                this.tEXTContentField = value;
            }
        }
        
        /// <remarks/>
        public int Language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
        
        /// <remarks/>
        public bool HTMLOpenTracking {
            get {
                return this.hTMLOpenTrackingField;
            }
            set {
                this.hTMLOpenTrackingField = value;
            }
        }
        
        /// <remarks/>
        public bool HTMLClickTracking {
            get {
                return this.hTMLClickTrackingField;
            }
            set {
                this.hTMLClickTrackingField = value;
            }
        }
        
        /// <remarks/>
        public bool TextClickTracking {
            get {
                return this.textClickTrackingField;
            }
            set {
                this.textClickTrackingField = value;
            }
        }
        
        /// <remarks/>
        public string ClickTrackingExceptions {
            get {
                return this.clickTrackingExceptionsField;
            }
            set {
                this.clickTrackingExceptionsField = value;
            }
        }
        
        /// <remarks/>
        public string ContentType {
            get {
                return this.contentTypeField;
            }
            set {
                this.contentTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Charset {
            get {
                return this.charsetField;
            }
            set {
                this.charsetField = value;
            }
        }
        
        /// <remarks/>
        public string MimeEncoding {
            get {
                return this.mimeEncodingField;
            }
            set {
                this.mimeEncodingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLastErrorCompletedEventHandler(object sender, GetLastErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ErrorResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateGroupCompletedEventHandler(object sender, CreateGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteGroupCompletedEventHandler(object sender, DeleteGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateGroupCompletedEventHandler(object sender, UpdateGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetGroupDetailCompletedEventHandler(object sender, GetGroupDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGroupDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGroupDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllGroupsCompletedEventHandler(object sender, GetAllGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddContactCompletedEventHandler(object sender, AddContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateContactCompletedEventHandler(object sender, UpdateContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateContactByIdCompletedEventHandler(object sender, UpdateContactByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateContactByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateContactByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddOrUpdateContactCompletedEventHandler(object sender, AddOrUpdateContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddOrUpdateContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddOrUpdateContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddOrUpdateContactByIdCompletedEventHandler(object sender, AddOrUpdateContactByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddOrUpdateContactByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddOrUpdateContactByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnsubscribeContactCompletedEventHandler(object sender, UnsubscribeContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnsubscribeContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnsubscribeContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteContactCompletedEventHandler(object sender, DeleteContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteContactByIdCompletedEventHandler(object sender, DeleteContactByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteContactByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteContactByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetContactDetailCompletedEventHandler(object sender, GetContactDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContactDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContactDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetContactDetailByIdCompletedEventHandler(object sender, GetContactDetailByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContactDetailByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContactDetailByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetContactActivityCompletedEventHandler(object sender, GetContactActivityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContactActivityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContactActivityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetContactActivityByIdCompletedEventHandler(object sender, GetContactActivityByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContactActivityByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContactActivityByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetContactGroupsCompletedEventHandler(object sender, GetContactGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContactGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContactGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetContactGroupsByIdCompletedEventHandler(object sender, GetContactGroupsByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContactGroupsByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContactGroupsByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllContactsCompletedEventHandler(object sender, GetAllContactsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllContactsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllContactsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetContactStatusCompletedEventHandler(object sender, GetContactStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContactStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContactStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetContactStatusByIdCompletedEventHandler(object sender, GetContactStatusByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContactStatusByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContactStatusByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ActivateContactCompletedEventHandler(object sender, ActivateContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ActivateContactByIdCompletedEventHandler(object sender, ActivateContactByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateContactByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateContactByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeactivateContactCompletedEventHandler(object sender, DeactivateContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeactivateContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeactivateContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeactivateContactByIdCompletedEventHandler(object sender, DeactivateContactByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeactivateContactByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeactivateContactByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddOrUpdateContactFieldCompletedEventHandler(object sender, AddOrUpdateContactFieldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddOrUpdateContactFieldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddOrUpdateContactFieldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllSimpleCampaignsCompletedEventHandler(object sender, GetAllSimpleCampaignsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllSimpleCampaignsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllSimpleCampaignsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateSimpleCampaignCompletedEventHandler(object sender, CreateSimpleCampaignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSimpleCampaignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSimpleCampaignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateSimpleCampaignCompletedEventHandler(object sender, UpdateSimpleCampaignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSimpleCampaignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSimpleCampaignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteSimpleCampaignCompletedEventHandler(object sender, DeleteSimpleCampaignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSimpleCampaignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteSimpleCampaignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendSimpleCampaignCompletedEventHandler(object sender, SendSimpleCampaignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSimpleCampaignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSimpleCampaignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ScheduleSimpleCampaignCompletedEventHandler(object sender, ScheduleSimpleCampaignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScheduleSimpleCampaignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ScheduleSimpleCampaignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSimpleCampaignDetailCompletedEventHandler(object sender, GetSimpleCampaignDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSimpleCampaignDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSimpleCampaignDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReportRecipientsSimpleCampaignCompletedEventHandler(object sender, ReportRecipientsSimpleCampaignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportRecipientsSimpleCampaignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportRecipientsSimpleCampaignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReportUniqueOpensSimpleCampaignsCompletedEventHandler(object sender, ReportUniqueOpensSimpleCampaignsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportUniqueOpensSimpleCampaignsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportUniqueOpensSimpleCampaignsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReportUniqueClicksSimpleCampaignsCompletedEventHandler(object sender, ReportUniqueClicksSimpleCampaignsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportUniqueClicksSimpleCampaignsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportUniqueClicksSimpleCampaignsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TestCompletedEventHandler(object sender, TestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591